name: CI/CD pipeline for Backend Service

on:
  push:
    branches: [ main, "dev/**", "feature/**"]

env:
  IMAGE_REPO: docker.io/${{ secrets.DOCKERHUB_USERNAME }}/job-huntly-backend
  SERVICE_NAME: jobhuntly-backend
  DEPLOY_DIR: ~/jobhuntly-service

jobs:
  build:
    name: Build & Push Docker image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Set up Docker BuildX
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push image (sha + latest)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.IMAGE_REPO }}:sha-${{ github.sha }}
            ${{ env.IMAGE_REPO }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # copy compose v√† env file l√™n VPS
      - name: Copy docker-compose & env file to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: |
            docker-compose.yml
            .env.local.properties
          target: ${{ env.DEPLOY_DIR }}

  deploy:
    name: Deploy Backend Service
    runs-on: ubuntu-latest
    needs: [ build ]

    steps:
      - name: Deploy on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -euo pipefail

            echo "‚û°Ô∏è  Di chuy·ªÉn t·ªõi th∆∞ m·ª•c tri·ªÉn khai..."
            mkdir -p ${{ env.DEPLOY_DIR }}
            cd ${{ env.DEPLOY_DIR }}

            echo "üîó  T·∫°o network (n·∫øu ch∆∞a c√≥)..."
            docker network create customer-network || true

            echo "üîÑ  Thay image trong compose th√†nh image ƒë·∫ßy ƒë·ªß namespace..."
            sed -i -E "s|^([[:space:]]*image:[[:space:]]*).*|\1${{ env.IMAGE_REPO }}:latest|g" docker-compose.yml

            echo "üîë  Docker login (n·∫øu image private)..."
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin || true

            echo "üõë  D·ª´ng container c≈© (n·∫øu t·ªìn t·∫°i)..."
            docker compose -f docker-compose.yml stop ${{ env.SERVICE_NAME }} || true
            docker compose -f docker-compose.yml rm -f ${{ env.SERVICE_NAME }} || true

            echo "‚¨áÔ∏è  K√©o image m·ªõi nh·∫•t..."
            docker compose -f docker-compose.yml pull ${{ env.SERVICE_NAME }} || true

            echo "üöÄ  Kh·ªüi ch·∫°y container m·ªõi..."
            docker compose -f docker-compose.yml up -d --remove-orphans

            echo "üßπ  D·ªçn r√°c image c≈©..."
            docker image prune -f

            echo "‚úÖ  Tri·ªÉn khai ho√†n t·∫•t!"